#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_worldspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;

// Ouput data
out vec3 color;


// Texture samplers
uniform sampler2D diffuseTextureSampler;
uniform sampler2D normalTextureSampler;
uniform sampler2D specularTextureSampler;

// Light
uniform vec3 lightPosition_worldspace;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform float lightIntensity;

// Render
uniform int renderMode;


void main()
{
	// Material properties
	vec3 MaterialDiffuseColor = texture(diffuseTextureSampler, UV).rgb;
	vec3 MaterialAmbientColor = ambientColor * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = specularColor * texture(specularTextureSampler, UV).rgb;

	vec3 textureNormal_tangentspace = normalize(texture(normalTextureSampler, UV).rgb*2 - 1);
	textureNormal_tangentspace.y = -textureNormal_tangentspace.y;
	textureNormal_tangentspace.z = -textureNormal_tangentspace.z;


	// Distance to the light
	float distance = length(lightPosition_worldspace - Position_worldspace);

	// Direction of the normal
	vec3 n = normalize(Normal_worldspace * textureNormal_tangentspace);
	// vec3 n = normalize(Normal_worldspace + textureNormal_tangentspace);
	// vec3 n = textureNormal_tangentspace;
	

	// Direction of the light (from the fragment to the light)
	vec3 l = normalize(lightPosition_worldspace - Position_worldspace);
	// vec3 l = normalize(LightDirection_cameraspace);
	// vec3 l = normalize(lightPosition_worldspace - Position_worldspace);

	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	 // - light is at the vertical of the triangle -> 1
	 // - light is perpendicular to the triangle -> 0
	 // - light is behind the triangle -> 0
	float cosTheta = clamp(dot(n, l), 0, 1);


	float shininess = 16;

	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l, n);


	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	 // - Looking into the reflection -> 1
	 // - Looking elsewhere -> < 1
	float cosAlpha = clamp(dot(E, R), 0, 1);

	// Höger 		-> (1,0,0) Röd
	// Upp			-> (0,1,0) Grön
	// Ur skärmen	-> (0,0,1) Blå
	
	switch (renderMode)
	{
		// Full render
		case 0:
			color =
			// Ambient : simulates indirect lighting
			MaterialAmbientColor +
			// Diffuse : "color" of the object
			MaterialDiffuseColor * diffuseColor * lightIntensity * cosTheta / (distance*distance) +
			// Specular : reflective highlight, like a mirror
			MaterialSpecularColor * specularColor * lightIntensity * pow(cosAlpha, shininess) / (distance*distance);

			// color = MaterialDiffuseColor * cosTheta;
			break;

		// Diffuse
		case 1:
			// color = vec3(0.8f, 0.8f, 0.8f) * diffuseColor * lightIntensity * (cosTheta / (distance*distance));
			color = MaterialDiffuseColor;// * diffuseColor * lightIntensity * (cosTheta / (distance*distance));
			break;

		// Normals
		case 2:
			color = n;// * Normal_worldspace;
			break;

		// Specular
		case 3:
			color = MaterialSpecularColor * specularColor * lightIntensity * pow(cosAlpha, shininess) / (distance*distance);
	}		
}