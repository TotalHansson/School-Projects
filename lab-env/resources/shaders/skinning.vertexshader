#version 330 core

#define MAX_JOINTS 64
#define MAX_INFLUENCES 4

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec4 vertexNormal;
layout(location = 2) in vec2 vertexUV;
layout(location = 3) in vec3 vertexTangent;
layout(location = 4) in vec3 vertexBitangent;
layout(location = 5) in vec4 skinWeight;
layout(location = 6) in vec4 skinJIndices;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

out vec3 LightDirection_tangentspace;
out vec3 EyeDirection_tangentspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat4 MV;

// Lighting information
uniform vec3 lightPosition_worldspace;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specColor;
uniform float lightIntensity;
uniform int renderMode;

// Joint matrices
uniform mat4 multipliedJoints[MAX_JOINTS];


void main()
{
	vec4 finalPosition = vec4(0,0,0,0);
	vec4 finalNormal = vec4(0,0,0,0);
	vec4 finalTangent = vec4(0,0,0,0);
	vec4 finalBinormal = vec4(0,0,0,0);

	for (int i = 0; i < MAX_INFLUENCES; i++)
	{
		int index = int(skinJIndices[i]);

		// The vert is moved from its original bind pose
		//  down to the root and then up to the animated joints pose
		finalPosition = finalPosition +
				vec4(vertexPosition, 1) *
				multipliedJoints[index] *
				(skinWeight[i] / 255.0f);

		finalNormal = finalNormal +
				(vertexNormal / 127.0f) *
				// vertexNormal *
				multipliedJoints[index] *
				(skinWeight[i] / 255.0f);

		finalTangent = finalTangent +
				(vec4(vertexTangent, 1) / 127.0f) *
				multipliedJoints[index] *
				(skinWeight[i] / 255.0f);

		finalBinormal = finalBinormal +
				(vec4(vertexBitangent, 1) / 127.0f) *
				multipliedJoints[index] *
				(skinWeight[i] / 255.0f);
	}

	gl_Position =  MVP * finalPosition;


	
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * vec4(finalPosition.xyz, 1)).xyz;
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( V * M * vec4(finalPosition.xyz, 1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 lightPosition_cameraspace = ( V * vec4(lightPosition_worldspace, 1)).xyz;
	LightDirection_cameraspace = lightPosition_cameraspace + EyeDirection_cameraspace;

	// Normal
	Normal_worldspace = (M * vec4(finalNormal.xyz, 1.0f)).xyz;

	// UV of the vertex
	UV = vertexUV;



	mat3 MV3x3 = mat3(MV);
	// vec3 vertexTangent_cameraspace = MV3x3 * vertexTangent;
	// vec3 vertexBitangent_cameraspace = MV3x3 * vertexBitangent;
	// vec3 vertexNormal_cameraspace = MV3x3 * vertexNormal.xyz;
	vec3 vertexTangent_cameraspace = MV3x3 * finalTangent.xyz;
	vec3 vertexBitangent_cameraspace = MV3x3 * finalBinormal.xyz;
	vec3 vertexNormal_cameraspace = MV3x3 * finalNormal.xyz;

	mat3 TBN = transpose(mat3(
		vertexTangent_cameraspace,
		vertexBitangent_cameraspace,
		vertexNormal_cameraspace
	));

	LightDirection_tangentspace = TBN * LightDirection_cameraspace;
	EyeDirection_tangentspace 	= TBN * EyeDirection_cameraspace;
}
